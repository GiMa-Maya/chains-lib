/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  'query GetBinanceBalances($address: String!) {\n  binance {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        symbol\n        price {\n          amount\n          scalingFactor\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceTransactions($address: String!, $pagination: CursorPagination, $dateRange: OptDateSelector, $blockRange: OptBlockSelector) {\n  binance {\n    transactions(\n      address: $address\n      pagination: $pagination\n      dateRange: $dateRange\n      blockRange: $blockRange\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          amount {\n            value\n          }\n          asset {\n            chain\n            contract\n            decimals\n            id\n            image\n            name\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n          }\n          fee {\n            value\n          }\n          hash\n          status\n          time\n          toAddress\n          fromAddress\n          type\n          blockHeight\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceFee {\n  binance {\n    fee\n  }\n}\n\nquery GetBinanceStatus {\n  binance {\n    status {\n      lastBlock {\n        hash\n        height\n        time\n        txCount\n      }\n    }\n  }\n}':
    types.GetBinanceBalancesDocument,
  'query BitcoinBalance($address: String!) {\n  bitcoin {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          scalingFactor\n        }\n      }\n      amount {\n        value\n        scalingFactor\n      }\n    }\n  }\n}\n\nquery GetFees($filter: String) {\n  chains(filter: $filter) {\n    name\n    fee {\n      value\n    }\n  }\n}\n\nquery GetBitcoinStatus {\n  bitcoin {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetBitcoinTransactions($address: String!, $blockRange: OptBlockRange!) {\n  bitcoin {\n    transactions(address: $address, blockRange: $blockRange) {\n      edges {\n        node {\n          blockIndex\n          blockNumber\n          fee {\n            scalingFactor\n            value\n          }\n          hash\n          inputs {\n            address\n            amount {\n              value\n              scalingFactor\n            }\n          }\n          outputs {\n            address\n            amount {\n              value\n              scalingFactor\n            }\n          }\n          status\n          timestamp\n        }\n      }\n    }\n  }\n}':
    types.BitcoinBalanceDocument,
  'query GetAssetsWithFilter($page: ConnectionArgs!, $filter: TokenFilter) {\n  assets {\n    tokens(page: $page, filter: $filter) {\n      page {\n        edges {\n          node {\n            contracts {\n              address\n              symbol\n              chain\n              scalingFactor\n            }\n            id\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n            name\n            icon\n          }\n        }\n      }\n    }\n  }\n}':
    types.GetAssetsWithFilterDocument,
  'query CosmosBalance($address: String!) {\n  cosmos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCosmosTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  cosmos {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCosmosFees {\n  cosmos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCosmosStatus {\n  cosmos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery OsmosisBalance($address: String!) {\n  osmosis {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetOsmosisTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  osmosis {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetOsmosisFees {\n  osmosis {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetOsmosisStatus {\n  osmosis {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AxelarBalance($address: String!) {\n  axelar {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAxelarTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  axelar {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAxelarFees {\n  axelar {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAxelarStatus {\n  axelar {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CrescentBalance($address: String!) {\n  crescent {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCrescentTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  crescent {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCrescentFees {\n  crescent {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCrescentStatus {\n  crescent {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KavaBalance($address: String!) {\n  kava {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKavaTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  kava {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKavaFees {\n  kava {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKavaStatus {\n  kava {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AkashBalance($address: String!) {\n  akash {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAkashTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  akash {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAkashFees {\n  akash {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAkashStatus {\n  akash {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CronosBalance($address: String!) {\n  cronos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCronosTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  cronos {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosFees {\n  cronos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCronosStatus {\n  cronos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KujiraBalance($address: String!) {\n  kujira {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKujiraTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  kujira {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKujiraFees {\n  kujira {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKujiraStatus {\n  kujira {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StrideBalance($address: String!) {\n  stride {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStrideTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  stride {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStrideFees {\n  stride {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStrideStatus {\n  stride {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery MarsBalance($address: String!) {\n  mars {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMarsTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  mars {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetMarsFees {\n  mars {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetMarsStatus {\n  mars {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery JunoBalance($address: String!) {\n  juno {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetJunoTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  juno {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetJunoFees {\n  juno {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetJunoStatus {\n  juno {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StargazeBalance($address: String!) {\n  stargaze {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStargazeTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  stargaze {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStargazeFees {\n  stargaze {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStargazeStatus {\n  stargaze {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.CosmosBalanceDocument,
  'query EthereumBalance($address: String!) {\n  ethereum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          scalingFactor\n        }\n      }\n    }\n  }\n}':
    types.EthereumBalanceDocument,
  'query GetCryptoAssets($input: [CryptoAssetArgs!]!) {\n  assets {\n    cryptoAssets(input: $input) {\n      chain\n      contract\n      id\n      name\n      symbol\n      image\n      decimals\n      price {\n        amount\n        scalingFactor\n      }\n    }\n  }\n}':
    types.GetCryptoAssetsDocument,
  'query GetSolanaBalance($address: String!) {\n  solana {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetSolanaTransactions($address: String!, $slotRange: OptBlockRange!, $dateRange: OptDateRange!) {\n  solana {\n    transactions(address: $address, slotRange: $slotRange, dateRange: $dateRange) {\n      fee {\n        amount {\n          value\n        }\n        payer\n      }\n      hash\n      slot\n      status\n      timestamp\n      transfers {\n        amount {\n          value\n        }\n        asset {\n          chain\n          contract\n          decimals\n          id\n          image\n          name\n          symbol\n        }\n        fromAddress\n        toAddress\n      }\n      signers\n    }\n  }\n}\n\nquery GetSolanaStatus {\n  solana {\n    status {\n      lastBlock {\n        blockHeight\n        blockTime\n        blockhash\n        slot\n        status\n        updatedOn\n      }\n    }\n  }\n}\n\nquery GetSolanaFee {\n  solana {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}':
    types.GetSolanaBalanceDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetBinanceBalances($address: String!) {\n  binance {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        symbol\n        price {\n          amount\n          scalingFactor\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceTransactions($address: String!, $pagination: CursorPagination, $dateRange: OptDateSelector, $blockRange: OptBlockSelector) {\n  binance {\n    transactions(\n      address: $address\n      pagination: $pagination\n      dateRange: $dateRange\n      blockRange: $blockRange\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          amount {\n            value\n          }\n          asset {\n            chain\n            contract\n            decimals\n            id\n            image\n            name\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n          }\n          fee {\n            value\n          }\n          hash\n          status\n          time\n          toAddress\n          fromAddress\n          type\n          blockHeight\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceFee {\n  binance {\n    fee\n  }\n}\n\nquery GetBinanceStatus {\n  binance {\n    status {\n      lastBlock {\n        hash\n        height\n        time\n        txCount\n      }\n    }\n  }\n}'
): typeof documents['query GetBinanceBalances($address: String!) {\n  binance {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        symbol\n        price {\n          amount\n          scalingFactor\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceTransactions($address: String!, $pagination: CursorPagination, $dateRange: OptDateSelector, $blockRange: OptBlockSelector) {\n  binance {\n    transactions(\n      address: $address\n      pagination: $pagination\n      dateRange: $dateRange\n      blockRange: $blockRange\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          amount {\n            value\n          }\n          asset {\n            chain\n            contract\n            decimals\n            id\n            image\n            name\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n          }\n          fee {\n            value\n          }\n          hash\n          status\n          time\n          toAddress\n          fromAddress\n          type\n          blockHeight\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceFee {\n  binance {\n    fee\n  }\n}\n\nquery GetBinanceStatus {\n  binance {\n    status {\n      lastBlock {\n        hash\n        height\n        time\n        txCount\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query BitcoinBalance($address: String!) {\n  bitcoin {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          scalingFactor\n        }\n      }\n      amount {\n        value\n        scalingFactor\n      }\n    }\n  }\n}\n\nquery GetFees($filter: String) {\n  chains(filter: $filter) {\n    name\n    fee {\n      value\n    }\n  }\n}\n\nquery GetBitcoinStatus {\n  bitcoin {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetBitcoinTransactions($address: String!, $blockRange: OptBlockRange!) {\n  bitcoin {\n    transactions(address: $address, blockRange: $blockRange) {\n      edges {\n        node {\n          blockIndex\n          blockNumber\n          fee {\n            scalingFactor\n            value\n          }\n          hash\n          inputs {\n            address\n            amount {\n              value\n              scalingFactor\n            }\n          }\n          outputs {\n            address\n            amount {\n              value\n              scalingFactor\n            }\n          }\n          status\n          timestamp\n        }\n      }\n    }\n  }\n}'
): typeof documents['query BitcoinBalance($address: String!) {\n  bitcoin {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          scalingFactor\n        }\n      }\n      amount {\n        value\n        scalingFactor\n      }\n    }\n  }\n}\n\nquery GetFees($filter: String) {\n  chains(filter: $filter) {\n    name\n    fee {\n      value\n    }\n  }\n}\n\nquery GetBitcoinStatus {\n  bitcoin {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetBitcoinTransactions($address: String!, $blockRange: OptBlockRange!) {\n  bitcoin {\n    transactions(address: $address, blockRange: $blockRange) {\n      edges {\n        node {\n          blockIndex\n          blockNumber\n          fee {\n            scalingFactor\n            value\n          }\n          hash\n          inputs {\n            address\n            amount {\n              value\n              scalingFactor\n            }\n          }\n          outputs {\n            address\n            amount {\n              value\n              scalingFactor\n            }\n          }\n          status\n          timestamp\n        }\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetAssetsWithFilter($page: ConnectionArgs!, $filter: TokenFilter) {\n  assets {\n    tokens(page: $page, filter: $filter) {\n      page {\n        edges {\n          node {\n            contracts {\n              address\n              symbol\n              chain\n              scalingFactor\n            }\n            id\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n            name\n            icon\n          }\n        }\n      }\n    }\n  }\n}'
): typeof documents['query GetAssetsWithFilter($page: ConnectionArgs!, $filter: TokenFilter) {\n  assets {\n    tokens(page: $page, filter: $filter) {\n      page {\n        edges {\n          node {\n            contracts {\n              address\n              symbol\n              chain\n              scalingFactor\n            }\n            id\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n            name\n            icon\n          }\n        }\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query CosmosBalance($address: String!) {\n  cosmos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCosmosTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  cosmos {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCosmosFees {\n  cosmos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCosmosStatus {\n  cosmos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery OsmosisBalance($address: String!) {\n  osmosis {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetOsmosisTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  osmosis {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetOsmosisFees {\n  osmosis {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetOsmosisStatus {\n  osmosis {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AxelarBalance($address: String!) {\n  axelar {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAxelarTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  axelar {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAxelarFees {\n  axelar {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAxelarStatus {\n  axelar {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CrescentBalance($address: String!) {\n  crescent {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCrescentTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  crescent {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCrescentFees {\n  crescent {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCrescentStatus {\n  crescent {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KavaBalance($address: String!) {\n  kava {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKavaTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  kava {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKavaFees {\n  kava {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKavaStatus {\n  kava {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AkashBalance($address: String!) {\n  akash {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAkashTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  akash {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAkashFees {\n  akash {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAkashStatus {\n  akash {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CronosBalance($address: String!) {\n  cronos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCronosTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  cronos {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosFees {\n  cronos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCronosStatus {\n  cronos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KujiraBalance($address: String!) {\n  kujira {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKujiraTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  kujira {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKujiraFees {\n  kujira {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKujiraStatus {\n  kujira {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StrideBalance($address: String!) {\n  stride {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStrideTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  stride {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStrideFees {\n  stride {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStrideStatus {\n  stride {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery MarsBalance($address: String!) {\n  mars {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMarsTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  mars {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetMarsFees {\n  mars {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetMarsStatus {\n  mars {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery JunoBalance($address: String!) {\n  juno {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetJunoTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  juno {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetJunoFees {\n  juno {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetJunoStatus {\n  juno {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StargazeBalance($address: String!) {\n  stargaze {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStargazeTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  stargaze {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStargazeFees {\n  stargaze {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStargazeStatus {\n  stargaze {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query CosmosBalance($address: String!) {\n  cosmos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCosmosTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  cosmos {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCosmosFees {\n  cosmos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCosmosStatus {\n  cosmos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery OsmosisBalance($address: String!) {\n  osmosis {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetOsmosisTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  osmosis {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetOsmosisFees {\n  osmosis {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetOsmosisStatus {\n  osmosis {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AxelarBalance($address: String!) {\n  axelar {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAxelarTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  axelar {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAxelarFees {\n  axelar {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAxelarStatus {\n  axelar {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CrescentBalance($address: String!) {\n  crescent {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCrescentTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  crescent {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCrescentFees {\n  crescent {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCrescentStatus {\n  crescent {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KavaBalance($address: String!) {\n  kava {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKavaTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  kava {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKavaFees {\n  kava {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKavaStatus {\n  kava {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AkashBalance($address: String!) {\n  akash {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAkashTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  akash {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAkashFees {\n  akash {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAkashStatus {\n  akash {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CronosBalance($address: String!) {\n  cronos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCronosTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  cronos {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosFees {\n  cronos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCronosStatus {\n  cronos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KujiraBalance($address: String!) {\n  kujira {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKujiraTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  kujira {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKujiraFees {\n  kujira {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKujiraStatus {\n  kujira {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StrideBalance($address: String!) {\n  stride {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStrideTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  stride {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStrideFees {\n  stride {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStrideStatus {\n  stride {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery MarsBalance($address: String!) {\n  mars {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMarsTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  mars {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetMarsFees {\n  mars {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetMarsStatus {\n  mars {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery JunoBalance($address: String!) {\n  juno {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetJunoTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  juno {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetJunoFees {\n  juno {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetJunoStatus {\n  juno {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StargazeBalance($address: String!) {\n  stargaze {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStargazeTransactions($address: String!, $first: Int!, $dateRange: OptDateRange!, $after: String) {\n  stargaze {\n    transactions(\n      address: $address\n      first: $first\n      dateRange: $dateRange\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStargazeFees {\n  stargaze {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStargazeStatus {\n  stargaze {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query EthereumBalance($address: String!) {\n  ethereum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          scalingFactor\n        }\n      }\n    }\n  }\n}'
): typeof documents['query EthereumBalance($address: String!) {\n  ethereum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          scalingFactor\n        }\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetCryptoAssets($input: [CryptoAssetArgs!]!) {\n  assets {\n    cryptoAssets(input: $input) {\n      chain\n      contract\n      id\n      name\n      symbol\n      image\n      decimals\n      price {\n        amount\n        scalingFactor\n      }\n    }\n  }\n}'
): typeof documents['query GetCryptoAssets($input: [CryptoAssetArgs!]!) {\n  assets {\n    cryptoAssets(input: $input) {\n      chain\n      contract\n      id\n      name\n      symbol\n      image\n      decimals\n      price {\n        amount\n        scalingFactor\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetSolanaBalance($address: String!) {\n  solana {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetSolanaTransactions($address: String!, $slotRange: OptBlockRange!, $dateRange: OptDateRange!) {\n  solana {\n    transactions(address: $address, slotRange: $slotRange, dateRange: $dateRange) {\n      fee {\n        amount {\n          value\n        }\n        payer\n      }\n      hash\n      slot\n      status\n      timestamp\n      transfers {\n        amount {\n          value\n        }\n        asset {\n          chain\n          contract\n          decimals\n          id\n          image\n          name\n          symbol\n        }\n        fromAddress\n        toAddress\n      }\n      signers\n    }\n  }\n}\n\nquery GetSolanaStatus {\n  solana {\n    status {\n      lastBlock {\n        blockHeight\n        blockTime\n        blockhash\n        slot\n        status\n        updatedOn\n      }\n    }\n  }\n}\n\nquery GetSolanaFee {\n  solana {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}'
): typeof documents['query GetSolanaBalance($address: String!) {\n  solana {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetSolanaTransactions($address: String!, $slotRange: OptBlockRange!, $dateRange: OptDateRange!) {\n  solana {\n    transactions(address: $address, slotRange: $slotRange, dateRange: $dateRange) {\n      fee {\n        amount {\n          value\n        }\n        payer\n      }\n      hash\n      slot\n      status\n      timestamp\n      transfers {\n        amount {\n          value\n        }\n        asset {\n          chain\n          contract\n          decimals\n          id\n          image\n          name\n          symbol\n        }\n        fromAddress\n        toAddress\n      }\n      signers\n    }\n  }\n}\n\nquery GetSolanaStatus {\n  solana {\n    status {\n      lastBlock {\n        blockHeight\n        blockTime\n        blockhash\n        slot\n        status\n        updatedOn\n      }\n    }\n  }\n}\n\nquery GetSolanaFee {\n  solana {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}'];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
